// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package data

import (
	"context"
	"database/sql"
	"time"
)

const createMember = `-- name: CreateMember :execresult
INSERT INTO Member (
    ArcheryAustraliaID, PasswordHash, FirstName, DateOfBirth, Gender, ClubRecorder, DefaultDivision
) VALUES (
    ?, ?, ?, ?, ?, ?, ?
)
`

type CreateMemberParams struct {
	Archeryaustraliaid string
	Passwordhash       string
	Firstname          string
	Dateofbirth        time.Time
	Gender             bool
	Clubrecorder       bool
	Defaultdivision    string
}

func (q *Queries) CreateMember(ctx context.Context, arg CreateMemberParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createMember,
		arg.Archeryaustraliaid,
		arg.Passwordhash,
		arg.Firstname,
		arg.Dateofbirth,
		arg.Gender,
		arg.Clubrecorder,
		arg.Defaultdivision,
	)
}

const deleteMember = `-- name: DeleteMember :exec
DELETE FROM Member
WHERE ArcheryAustraliaID = ?
`

func (q *Queries) DeleteMember(ctx context.Context, archeryaustraliaid string) error {
	_, err := q.db.ExecContext(ctx, deleteMember, archeryaustraliaid)
	return err
}

const getMemberByID = `-- name: GetMemberByID :one
SELECT archeryaustraliaid, passwordhash, firstname, dateofbirth, gender, clubrecorder, defaultdivision FROM Member
WHERE ArcheryAustraliaID = ?
LIMIT 1
`

func (q *Queries) GetMemberByID(ctx context.Context, archeryaustraliaid string) (Member, error) {
	row := q.db.QueryRowContext(ctx, getMemberByID, archeryaustraliaid)
	var i Member
	err := row.Scan(
		&i.Archeryaustraliaid,
		&i.Passwordhash,
		&i.Firstname,
		&i.Dateofbirth,
		&i.Gender,
		&i.Clubrecorder,
		&i.Defaultdivision,
	)
	return i, err
}
